{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"traininglinkedservice": {
			"type": "string"
		},
		"IncrementalLinkService": {
			"type": "string"
		},
		"IncrementalLinkedServiced": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalDataLoadPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline loads data incrementally from different sources into a staging database.",
				"activities": [
					{
						"name": "LookupConfigTable",
						"description": "This Looks up the config table topick out the entries with Enabled set to 1.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * From cfg\nwhere Enabled = '1'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "IncrementalSRCDataset",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LookupConfigTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupConfigTable').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Source, 'CRM')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(equals(item().Incremental_Full_Load, 1))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy Non-Incremental Tables",
												"description": "This copy activity handles non-incremental copies, that is full load",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().Table_Name}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"tableOption": "autoCreate"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference"
													}
												],
												"outputs": [
													{
														"referenceName": "IncrementalSinkDataset",
														"type": "DatasetReference",
														"parameters": {
															"TableName": {
																"value": "@item().Table_Name",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Get Last Updated Date",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy Non-Incremental Tables",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT\nmax(Last_Updated_Date) as MaxD from @{item().Table_Name}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Update Last Updated Date Non-Incremental",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Get Last Updated Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "UPDATE cfg\nset Max_LastUpdatedDate = '@{activity('Get Last Updated Date').output.firstRow.MaxD}'\nwhere Table_Name = '@{item().Table_Name}'\n\nselect '1'\n\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRC",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "LastUpdateLookup",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT Max_LastUpdatedDate from cfg WHERE Table_Name like '@{item().Table_Name}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Copy fro  SRC to Staging",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LastUpdateLookup",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT\n * FROM @{item().Table_Name} WHERE\n     Convert(varchar(max), Last_Updated_Date, 120) > \n         Convert(varchar(max),\n         substring(replace(\n          '@{activity('LastUpdateLookup').output.firstRow.Max_LastUpdatedDate}','T', ' '), 0, 20)\n   ,120)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference"
													}
												],
												"outputs": [
													{
														"referenceName": "IncrementalSinkDataset1",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "@item().Table_Name"
														}
													}
												]
											},
											{
												"name": "GET Updated Date",
												"description": "This lookup picks the Last Updated Date for the Specific Staging Table so it can be used to update its entry in the cfg table",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy fro  SRC to Staging",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT\nmax(Last_Updated_Date) as MaxD from @{item().Table_Name}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Update Config Table",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "GET Updated Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "update cfg\nset Max_LastUpdatedDate = '@{activity('GET Updated Date').output.firstRow.MaxD}'\nwhere Table_Name = '@{item().Table_Name}'\n\nselect '1'\n\n\n\n\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-08T22:36:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/IncrementalSRCDataset')]",
				"[concat(variables('factoryId'), '/datasets/IncrementalSinkDataset')]",
				"[concat(variables('factoryId'), '/datasets/IncrementalSRC')]",
				"[concat(variables('factoryId'), '/datasets/IncrementalSinkDataset1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalSRCDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('traininglinkedservice')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalSinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('IncrementalLinkService')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "adf"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalSRC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('IncrementalLinkedServiced')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalSinkDataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('IncrementalLinkService')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		}
	]
}