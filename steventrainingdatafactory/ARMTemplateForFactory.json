{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "steventrainingdatafactory"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorageGen2LinkedService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorageGen2LinkedService'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"AzureSqlDatabase3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase3'"
		},
		"CopyFromPCLinkedService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'CopyFromPCLinkedService1'"
		},
		"CopyFromPClinkedService_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'CopyFromPClinkedService'"
		},
		"CopyFrpmPCLinkedService_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'CopyFrpmPCLinkedService'"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"FileServer2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer2'"
		},
		"FileServer3_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer3'"
		},
		"FileServer4_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer4'"
		},
		"IncrementalLinkService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IncrementalLinkService'"
		},
		"IncrementalLinkedServiced_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IncrementalLinkedServiced'"
		},
		"SynapseLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SynapseLinkedService'"
		},
		"SynapseStagingLinkedService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'SynapseStagingLinkedService'"
		},
		"linkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService1'"
		},
		"linkedService2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService2'"
		},
		"linkedService4_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'linkedService4'"
		},
		"traininglinkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'traininglinkedservice'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sqlva7bmrgslahm7vu.dfs.core.windows.net"
		},
		"AzureDataLakeStorageGen2LinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakegen2storageacct.dfs.core.windows.net"
		},
		"AzureDataLakeStoreLinkedService_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://trainingdatalake1.azuredatalakestore.net/webhdfs/v1"
		},
		"AzureDataLakeStoreLinkedService_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "steventrainingdatafactory"
		},
		"AzureDataLakeStoreLinkedService_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "b0900eb4-959a-4b51-aefc-1a35f7de135d"
		},
		"AzureDataLakeStoreLinkedService_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "TrainingResourceGroup"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://StevenTrainingKeys.vault.azure.net/"
		},
		"AzureKeyVaultDataLake_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://StevenTrainingKeys.vault.azure.net/"
		},
		"CopyFromPCLinkedService1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\STEPHENIK\\Aza Docs"
		},
		"CopyFromPCLinkedService1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "steven"
		},
		"CopyFromPClinkedService_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\STEPHENIK\\Data Factory v2"
		},
		"CopyFromPClinkedService_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "steven"
		},
		"CopyFrpmPCLinkedService_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\STEPHENIK\\Aza Docs"
		},
		"CopyFrpmPCLinkedService_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "steven"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\STEPHENIK\\PowerBI Materials"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "steven4great@gmail.com"
		},
		"FileServer2_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\STEPHENIK\\PowerBI Materials"
		},
		"FileServer2_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "steven"
		},
		"FileServer3_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\STEPHENIK\\Data Factory Files"
		},
		"FileServer3_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "STEPHENIK"
		},
		"FileServer4_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\STEPHENIK\\Data Factory Files"
		},
		"FileServer4_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "Steven"
		},
		"SynapseStagingLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakegen2storageacct.dfs.core.windows.net"
		},
		"linkedService3_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://trainingdatalake1.azuredatalakestore.net/webhdfs/v1"
		},
		"linkedService3_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "e42fdae0-299d-4fdf-a42b-d5c4eb874217"
		},
		"linkedService3_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "b0900eb4-959a-4b51-aefc-1a35f7de135d"
		},
		"linkedService3_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "TrainingResourceGroup"
		},
		"linkedService4_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://trainingdatalake1.azuredatalakestore.net/webhdfs/v1"
		},
		"linkedService4_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "eab2cd77-24dd-4e71-84e1-86460bb25391"
		},
		"linkedService4_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "e42fdae0-299d-4fdf-a42b-d5c4eb874217"
		},
		"linkedService4_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "b0900eb4-959a-4b51-aefc-1a35f7de135d"
		},
		"linkedService4_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "TrainingResourceGroup"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Assignment 3pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is the solution to assignment 3",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AssignmentDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-05T21:42:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AssignmentDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy2SynapseFromPC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline demonstrates copying from a local file system to Azure Synapse Analytics using Data Factory pipelines",
				"activities": [
					{
						"name": "Copy to Synapse",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "SynapseStagingLinkedService",
									"type": "LinkedServiceReference"
								},
								"path": "synapsefilesystem"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SynapseDatasetLocal",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SynapseDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SynapseDatasetLocal')]",
				"[concat(variables('factoryId'), '/datasets/SynapseDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SynapseStagingLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyDataFromPCToAzurePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromPCFileToAzure",
						"description": "This is a pipeline for copying a flat file from PC to Azure, that a \"Lift and Shift\" operation using SSIS Integrated Runtime",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "linkedService2",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": " Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NAME",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": " Age",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AGE",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": " Address",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ADDRESS",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": " Salary\r",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SALARY",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableCopiedFromPC",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-04T14:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCopiedFromPC')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyDemoPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a demo pipeline to demonstrate copying (lift and shift) data from a local flat file on pc to Azure SQL Database ",
				"activities": [
					{
						"name": "Demo Copy",
						"description": "Copy Activity for the DemoCopyPipeline",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City\r",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Demo Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-04T15:22:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_kv4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_kv4",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "/Dfile2.txt"
							},
							{
								"name": "Destination",
								"value": "gen2filesystem//Copied"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_kv4",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_kv4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-09T10:25:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_kv4')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_kv4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_uwe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_uwe",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "/Remita E-Invoice.pdf"
							},
							{
								"name": "Destination",
								"value": "gen2filesystem//NewCopiedData"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 2
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_uwe",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_uwe",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-09T10:22:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_uwe')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_uwe')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyTaskPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline copies data from a source Azure SQL database to another Azure SQL database",
				"activities": [
					{
						"name": "Grab Conditional Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT\n\nEnabled\n\nFROM \n \ndbo.[Config]\nWHERE Enabled = '1'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LookupValues",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Grab Conditional Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [Customer]",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Customer_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Customer_Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Salary",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Salary",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CopyFromSourceDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyToDestinationDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-05T10:46:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LookupValues')]",
				"[concat(variables('factoryId'), '/datasets/CopyFromSourceDB')]",
				"[concat(variables('factoryId'), '/datasets/CopyToDestinationDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataFlowForDataLake",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataLakesource": {},
									"DataFlowSink": {},
									"Stream1Sink": {},
									"Stream2sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-05T14:32:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlowForDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetaDataPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to get metadata from a local file system.",
				"activities": [
					{
						"name": "Get Metadata from Local File System",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "GetMetadataDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata from Local File System",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata from Local File System').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, 'f')",
								"type": "Expression"
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-05T06:02:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GetMetadataDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalDataLoadPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline loads data incrementally from different sources into a staging database.",
				"activities": [
					{
						"name": "LookupConfigTable",
						"description": "This Looks up the config table topick out the entries with Enabled set to 1.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * From cfg\nwhere Enabled = '1'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "IncrementalSRCDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LookupConfigTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupConfigTable').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Source, 'CRM')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(equals(item().Incremental_Full_Load, 1))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy Non-Incremental Tables",
												"description": "This copy activity handles non-incremental copies, that is full load",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().Table_Name}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"tableOption": "autoCreate"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "IncrementalSinkDataset",
														"type": "DatasetReference",
														"parameters": {
															"TableName": {
																"value": "@item().Table_Name",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Get Last Updated Date",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy Non-Incremental Tables",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT\nmax(Last_Updated_Date) as MaxD from @{item().Table_Name}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Update Last Updated Date Non-Incremental",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Get Last Updated Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "UPDATE cfg\nset Max_LastUpdatedDate = '@{activity('Get Last Updated Date').output.firstRow.MaxD}'\nwhere Table_Name = '@{item().Table_Name}'\n\nselect '1'\n\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRC",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "LastUpdateLookup",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT Max_LastUpdatedDate from cfg WHERE Table_Name like '@{item().Table_Name}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Copy fro  SRC to Staging",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LastUpdateLookup",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT\n * FROM @{item().Table_Name} WHERE\n     Convert(varchar(max), Last_Updated_Date, 120) > \n         Convert(varchar(max),\n         substring(replace(\n          '@{activity('LastUpdateLookup').output.firstRow.Max_LastUpdatedDate}','T', ' '), 0, 20)\n   ,120)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "IncrementalSinkDataset1",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "@item().Table_Name"
														}
													}
												]
											},
											{
												"name": "GET Updated Date",
												"description": "This lookup picks the Last Updated Date for the Specific Staging Table so it can be used to update its entry in the cfg table",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy fro  SRC to Staging",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT\nmax(Last_Updated_Date) as MaxD from @{item().Table_Name}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Update Config Table",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "GET Updated Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "update cfg\nset Max_LastUpdatedDate = '@{activity('GET Updated Date').output.firstRow.MaxD}'\nwhere Table_Name = '@{item().Table_Name}'\n\nselect '1'\n\n\n\n\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "IncrementalSRCDataset",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-08T22:36:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/IncrementalSRCDataset')]",
				"[concat(variables('factoryId'), '/datasets/IncrementalSinkDataset')]",
				"[concat(variables('factoryId'), '/datasets/IncrementalSRC')]",
				"[concat(variables('factoryId'), '/datasets/IncrementalSinkDataset1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a Pipeline for executing a slowly changing dimension Type 1, where NO History is required in the Dimension table",
				"activities": [
					{
						"name": "SCD Type 1 Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD Type1 DataFlows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingSource": {},
									"DimSource": {},
									"SinkIntoDimTable": {},
									"SinkToDimNotExist": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-08T09:17:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD Type1 DataFlows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlow SCDType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2DataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGSource": {},
									"MaxKey": {},
									"DimSource": {},
									"SinkIntoDimTable": {},
									"SinkToDimRecordExists": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-08T15:46:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementalLinkedServiced",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().Tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementalLinkedServiced')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable10')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Finance"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable11')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Table_Name",
						"type": "varchar"
					},
					{
						"name": "Source",
						"type": "varchar"
					},
					{
						"name": "Max_LastUpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Enabled",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Incremental_Full_Load",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cfg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CopyDemo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CopyDemo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CopyDemo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Enabled",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Config"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "Customer-Data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable8')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Dept_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable9')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "HR"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableCopiedFromPC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NAME",
						"type": "varchar"
					},
					{
						"name": "AGE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ADDRESS",
						"type": "char"
					},
					{
						"name": "SALARY",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CUSTOMERS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopiedFromPC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NAME",
						"type": "varchar"
					},
					{
						"name": "AGE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ADDRESS",
						"type": "char"
					},
					{
						"name": "SALARY",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CUSTOMERS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromSourceDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyToDestinationDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeSourceFlow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"fileName": "sales-data-part1.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "String"
					},
					{
						"name": "StockCode",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "InvoiceDate",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFromPCLinkedService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "file1.txt"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "City\r",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFromPCLinkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFromPClinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "file2.txt"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFromPClinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFromPClinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "file3.txt"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFromPClinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_kv4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Copied",
						"fileSystem": "gen2filesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_uwe')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "NewCopiedData",
						"fileSystem": "gen2filesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Case Study File",
					"location": {
						"type": "FileServerLocation",
						"fileName": "Case Study Part 1.2.pbix"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlatFileDataLake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStoreLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"fileName": "flat file.txt"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": " Name",
						"type": "String"
					},
					{
						"name": " Age",
						"type": "String"
					},
					{
						"name": " Address",
						"type": "String"
					},
					{
						"name": " Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStoreLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlatFileFromLaptop')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFromPClinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "flat file.txt"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFromPClinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlatFileFromPC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFrpmPCLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "flat file.txt"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": " Name",
						"type": "String"
					},
					{
						"name": " Age",
						"type": "String"
					},
					{
						"name": " Address",
						"type": "String"
					},
					{
						"name": " Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFrpmPCLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadataDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFromPClinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFromPClinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalSRC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementalLinkedServiced",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementalLinkedServiced')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalSRCDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalSinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementalLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "adf"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementalLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalSinkDataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementalLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementalLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupValues')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Enabled",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Config"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineDataFlowSinkDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NAME",
						"type": "varchar"
					},
					{
						"name": "AGE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ADDRESS",
						"type": "char"
					},
					{
						"name": "SALARY",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CUSTOMERS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDDimSourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesRep_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesRep_Number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesRep_Name",
						"type": "varchar"
					},
					{
						"name": "SalesRep_Department",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_SalesRep"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDStagingDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesRep_Number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesRep_Name",
						"type": "varchar"
					},
					{
						"name": "SalesRep_Department",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "STG_Sales_Rep"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesRep_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesRep_Number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesRep_Name",
						"type": "varchar"
					},
					{
						"name": "SalesRep_Department",
						"type": "varchar"
					},
					{
						"name": "Current_Flag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VerifyField",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_SalesRepT2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_kv4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFromPClinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "Dfile2.txt"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFromPClinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_uwe')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFromPClinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "Remita E-Invoice.pdf"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFromPClinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Steam2Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "CustomerData-Default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stream1Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "CustomerData-Stream1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "copy_to_demo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SynapseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDatasetLocal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "customer-data.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrainingPipelineDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NAME",
						"type": "varchar"
					},
					{
						"name": "AGE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ADDRESS",
						"type": "char"
					},
					{
						"name": "SALARY",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CUSTOMERS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrainingPipelineDataset2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "IDCol",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "trainingTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/traininglinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydemodelimiter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CopyFromPClinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "file1.txt"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CopyFromPClinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageGen2LinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageGen2LinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorageGen2LinkedService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStoreLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('AzureDataLakeStoreLinkedService_properties_typeProperties_dataLakeStoreUri')]",
					"tenant": "[parameters('AzureDataLakeStoreLinkedService_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeStoreLinkedService_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeStoreLinkedService_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVaultDataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultDataLake_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromPCLinkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Linked Service is for copying a flat file (comma delimited) from PC to Azure Data Factory using SSIS Integration Runtime",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('CopyFromPCLinkedService1_properties_typeProperties_host')]",
					"userId": "[parameters('CopyFromPCLinkedService1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('CopyFromPCLinkedService1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "trainingSelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/trainingSelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromPClinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service is for copying from pc to Azure",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('CopyFromPClinkedService_properties_typeProperties_host')]",
					"userId": "[parameters('CopyFromPClinkedService_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('CopyFromPClinkedService_password')]"
					}
				},
				"connectVia": {
					"referenceName": "trainingSelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/trainingSelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFrpmPCLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('CopyFrpmPCLinkedService_properties_typeProperties_host')]",
					"userId": "[parameters('CopyFrpmPCLinkedService_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('CopyFrpmPCLinkedService_password')]"
					}
				},
				"connectVia": {
					"referenceName": "trainingSelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/trainingSelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "trainingSelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/trainingSelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer2_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer2_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer2_password')]"
					}
				},
				"connectVia": {
					"referenceName": "trainingSelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/trainingSelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer3_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer3_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer3_password')]"
					}
				},
				"connectVia": {
					"referenceName": "trainingSelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/trainingSelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer4_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer4_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer4_password')]"
					}
				},
				"connectVia": {
					"referenceName": "trainingSelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/trainingSelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalLinkService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IncrementalLinkService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalLinkedServiced')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IncrementalLinkedServiced_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('SynapseLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseStagingLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('SynapseStagingLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('SynapseStagingLinkedService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('linkedService3_properties_typeProperties_dataLakeStoreUri')]",
					"tenant": "[parameters('linkedService3_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('linkedService3_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('linkedService3_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('linkedService4_properties_typeProperties_dataLakeStoreUri')]",
					"servicePrincipalId": "[parameters('linkedService4_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('linkedService4_servicePrincipalKey')]"
					},
					"tenant": "[parameters('linkedService4_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('linkedService4_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('linkedService4_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/traininglinkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is an Azure SQL Database linked service created for my trainingpipeline  ",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('traininglinkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrainingTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Trigger fires the execution of the trainingpipeline",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-06-03T18:51:00Z",
						"endTime": "2021-06-04T16:15:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trainingSelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "This is a self-hosted integration runtime for connecting to an on-premises source",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AssignmentDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This data flow belongs to the Assignment 3 pipeline",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable8",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable9",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable10",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tCust_ID as integer,\n\t\tCustomer_Name as string,\n\t\tDept_ID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 split(Dept_ID == 100,\n\tDept_ID == 500,\n\tdisjoint: false) ~> ConditionalSplit1@(HRStream, FinanceStream)\nConditionalSplit1@HRStream sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCust_ID as integer,\n\t\tCustomer_Name as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nConditionalSplit1@FinanceStream sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCust_ID as integer,\n\t\tCustomer_Name as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable8')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable9')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable10')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowForDataLake')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataLakeSourceFlow",
								"type": "DatasetReference"
							},
							"name": "DataLakesource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable7",
								"type": "DatasetReference"
							},
							"name": "DataFlowSink"
						},
						{
							"dataset": {
								"referenceName": "Stream1Dataset",
								"type": "DatasetReference"
							},
							"name": "Stream1Sink"
						},
						{
							"dataset": {
								"referenceName": "Steam2Dataset",
								"type": "DatasetReference"
							},
							"name": "Stream2sink"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "DerivedColumn"
						}
					],
					"script": "source(output(\n\t\tInvoiceNo as string,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as date,\n\t\tUnitPrice as float,\n\t\tCustomerID as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DataLakesource\nDerivedColumn split(UnitPrice > 1 && UnitPrice < 3,\n\tUnitPrice > 3 && UnitPrice < 4,\n\tdisjoint: false) ~> ConditionalSplit1@(Stream1, Stream2, DefaultStream)\nDataLakesource derive(InvoiceDate = addDays(toDate('2021-06-04'), 5)) ~> DerivedColumn\nConditionalSplit1@Stream1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DataFlowSink\nConditionalSplit1@Stream2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Stream1Sink\nConditionalSplit1@DefaultStream sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Stream2sink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataLakeSourceFlow')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable7')]",
				"[concat(variables('factoryId'), '/datasets/Stream1Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Steam2Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type1 DataFlows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SCDStagingDataset",
								"type": "DatasetReference"
							},
							"name": "StagingSource"
						},
						{
							"dataset": {
								"referenceName": "SCDDimSourceDataset",
								"type": "DatasetReference"
							},
							"name": "DimSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SCDDimSourceDataset",
								"type": "DatasetReference"
							},
							"name": "SinkIntoDimTable"
						},
						{
							"dataset": {
								"referenceName": "SCDDimSourceDataset",
								"type": "DatasetReference"
							},
							"name": "SinkToDimNotExist"
						}
					],
					"transformations": [
						{
							"name": "DoesExist"
						},
						{
							"name": "AlterExistingRow"
						},
						{
							"name": "NotExists"
						}
					],
					"script": "source(output(\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingSource\nsource(output(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimSource\nStagingSource, DimSource exists(StagingSource@SalesRep_Number == DimSource@SalesRep_Number,\n\tnegate:false,\n\tbroadcast: 'auto')~> DoesExist\nDoesExist alterRow(updateIf(1==1)) ~> AlterExistingRow\nStagingSource, DimSource exists(StagingSource@SalesRep_Number == DimSource@SalesRep_Number,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExists\nAlterExistingRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SalesRep_Number'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesRep_Number,\n\t\tSalesRep_Name,\n\t\tSalesRep_Department\n\t)) ~> SinkIntoDimTable\nNotExists sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkToDimNotExist"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCDStagingDataset')]",
				"[concat(variables('factoryId'), '/datasets/SCDDimSourceDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SCDStagingDataset",
								"type": "DatasetReference"
							},
							"name": "STGSource"
						},
						{
							"dataset": {
								"referenceName": "SCDType2Dataset",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						},
						{
							"dataset": {
								"referenceName": "SCDType2Dataset",
								"type": "DatasetReference"
							},
							"name": "DimSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SCDType2Dataset",
								"type": "DatasetReference"
							},
							"name": "SinkIntoDimTable"
						},
						{
							"dataset": {
								"referenceName": "SCDType2Dataset",
								"type": "DatasetReference"
							},
							"name": "SinkToDimRecordExists"
						},
						{
							"dataset": {
								"referenceName": "SCDType2Dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "New"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STGSource\nsource(output(\n\t\tMAXKEY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select max(isnull(SalesRep_Key, 0)) as MAXKEY\\nfrom dbo.Dim_SalesRepT2',\n\tformat: 'query') ~> MaxKey\nsource(output(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string,\n\t\tCurrent_Flag as integer,\n\t\tVerifyField as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimSource\nSTGSource, MaxKey join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nDimSource select(mapColumn(\n\t\tDimSalesRep_Key = SalesRep_Key,\n\t\tDimSalesRep_Number = SalesRep_Number,\n\t\tDimSalesRep_Name = SalesRep_Name,\n\t\tDimSalesRep_Department = SalesRep_Department,\n\t\tDimCurrent_Flag = Current_Flag,\n\t\tDimVerifyField = VerifyField\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nJoin1, Select1 lookup(SalesRep_Number == DimSalesRep_Number,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DimSalesRep_Number),\n\tdisjoint: false) ~> New@(New, DoesExist)\nNew@New derive(Current_Flag = 1,\n\t\tVerifyField = 'NEW') ~> DerivedColumn1\nDerivedColumn1 alterRow(insertIf(true())) ~> AlterRow1\nNew@DoesExist derive(NCurrent_Flag = 1,\n\t\tVerifyField = 'NEW') ~> DerivedColumn2\nNew@DoesExist derive(DCurrent_Flag = 0,\n\t\tVerifyField = 'UPDATE') ~> DerivedColumn3\nDerivedColumn3 filter(DimSalesRep_Key <= MAXKEY) ~> Filter1\nFilter1 alterRow(updateIf(DimSalesRep_Key<=MAXKEY)) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string,\n\t\tCurrent_Flag as integer,\n\t\tVerifyField as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesRep_Number,\n\t\tSalesRep_Name,\n\t\tSalesRep_Department,\n\t\tCurrent_Flag,\n\t\tVerifyField\n\t)) ~> SinkIntoDimTable\nDerivedColumn2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string,\n\t\tCurrent_Flag as integer,\n\t\tVerifyField as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesRep_Number,\n\t\tSalesRep_Name,\n\t\tSalesRep_Department,\n\t\tCurrent_Flag = NCurrent_Flag,\n\t\tVerifyField\n\t)) ~> SinkToDimRecordExists\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string,\n\t\tCurrent_Flag as integer,\n\t\tVerifyField as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SalesRep_Key'],\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT dbo.Dim_SalesRepT2 On'],\n\tpostSQLs:['SET IDENTITY_INSERT dbo.Dim_SalesRepT2 OFF'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesRep_Key = DimSalesRep_Key,\n\t\tSalesRep_Number,\n\t\tSalesRep_Name,\n\t\tSalesRep_Department,\n\t\tCurrent_Flag = DCurrent_Flag,\n\t\tVerifyField\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCDStagingDataset')]",
				"[concat(variables('factoryId'), '/datasets/SCDType2Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LookupValues",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tId as integer,\n\t\tName as string,\n\t\tType as string,\n\t\tEnabled as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 select(mapColumn(\n\t\tEnabled\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LookupValues')]"
			]
		}
	]
}