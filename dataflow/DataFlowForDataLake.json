{
	"name": "DataFlowForDataLake",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DataLakeSourceFlow",
						"type": "DatasetReference"
					},
					"name": "DataLakesource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable7",
						"type": "DatasetReference"
					},
					"name": "DataFlowSink"
				},
				{
					"dataset": {
						"referenceName": "Stream1Dataset",
						"type": "DatasetReference"
					},
					"name": "Stream1Sink"
				},
				{
					"dataset": {
						"referenceName": "Steam2Dataset",
						"type": "DatasetReference"
					},
					"name": "Stream2sink"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "DerivedColumn"
				}
			],
			"script": "source(output(\n\t\tInvoiceNo as string,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as date,\n\t\tUnitPrice as float,\n\t\tCustomerID as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DataLakesource\nDerivedColumn split(UnitPrice > 1 && UnitPrice < 3,\n\tUnitPrice > 3 && UnitPrice < 4,\n\tdisjoint: false) ~> ConditionalSplit1@(Stream1, Stream2, DefaultStream)\nDataLakesource derive(InvoiceDate = addDays(toDate('2021-06-04'), 5)) ~> DerivedColumn\nConditionalSplit1@Stream1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DataFlowSink\nConditionalSplit1@Stream2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Stream1Sink\nConditionalSplit1@DefaultStream sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Stream2sink"
		}
	}
}